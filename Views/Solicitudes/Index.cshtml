@{
    ViewData["Title"] = "Solicitudes de Material";
}

<h2 class="text-center mb-4 d-flex align-items-center justify-content-center">
    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-receipt-text"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z" /><path d="M14 8H8" /><path d="M16 12H8" /><path d="M13 16H8" /></svg>
    Solicitud de Materiales
</h2>

<div class="mb-3">
    <button type="button" class="btn btn-secondary" id="btnAgregarInventario" data-bs-toggle="modal" data-bs-target="#modalInventario">
        Agregar desde Inventario
    </button>

    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#modalNuevoProducto">
        Agregar Producto No Listado
    </button>
</div>

<!-- Tabla de solicitudes -->
<table id="tablaSolicitudes" class="table table-striped mt-3">
    <thead>
        <tr>
            <th>Nombre del Material</th>
            <th>Cantidad</th>
            <th>Medida</th>
            <th>Unidad de Medida</th>
            <th>Marca</th>
            <th>Descripción</th>
            <th>Imagen del Producto</th>
            <th>Posible Proveedor</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        <!-- Se llenará dinámicamente -->
    </tbody>
</table>

<!-- Modal para agregar producto no listado -->
<div class="modal fade" id="modalNuevoProducto" tabindex="-1" aria-labelledby="modalNuevoProductoLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalNuevoProductoLabel">Crear Solicitud de Material</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formSolicitudMaterial">
                    <input type="hidden" id="ITEM" />

                    <div class="mb-3">
                        <label class="form-label">Nombre del Material</label>
                        <input type="text" class="form-control" id="NombreTecnico">
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Cantidad</label>
                        <input type="number" class="form-control" id="Cantidad" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Medida</label>
                        <input type="text" class="form-control" id="Medida" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Unidad de Medida</label>
                        <input type="text" class="form-control" id="UnidadMedida" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Marca</label>
                        <input type="text" class="form-control" id="Marca">
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea class="form-control" id="Descripcion"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Imagen del Producto</label>
                        <input type="file" class="form-control" id="ImagenInput" accept="images/*">
                        <img id="PreviewImagen" src="" alt="Imagen del Producto" style="display:none; max-width: 150px; margin-top: 10px;">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Proveedor</label>
                        <select id="Proveedor" class="form-control">
                            <option value="">Seleccione un proveedor</option>
                            @foreach (var proveedor in ViewBag.Proveedores)
                            {
                                <option value="@proveedor.Value">@proveedor.Text</option>
                            }
                        </select>
                    </div>



                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-orange" id="btnGuardar">Guardar</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<!-- Botón "Crear Solicitud de Material" ubicado abajo a la derecha -->
<div style="text-align: right; margin-top: 20px;">
    <button type="button" class="btn btn-orange" id="btnDescargarPDF">
        Descargar Solicitudes en PDF
    </button>

</div>

<!-- Modal para seleccionar productos desde el inventario -->
<div class="modal fade" id="modalInventario" tabindex="-1" aria-labelledby="modalInventarioLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <!-- 🔹 Cambiado de modal-lg a modal-xl -->
        <div class="modal-content" style="background-color: #fff;">
            <div class="modal-header">
                <h5 class="modal-title" id="modalInventarioLabel">Seleccionar Producto del Inventario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table id="tablaInventario" class="table table-striped table-bordered nowrap" width="100%">
                    <thead>
                        <tr>
                            <th>Seleccionar</th>
                            <th>Nombre</th>
                            <th>Cantidad</th>
                            <th>Medida</th>
                            <th>Unidad de Medida</th>
                            <th>Marca</th>
                            <th class="d-none">Descripción</th>
                            <th>Ubicación</th>
                            <th>Estado</th>
                            <th>Imagen</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Se llenarán los productos dinámicamente -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!-- Script -->
<script>
       document.addEventListener("DOMContentLoaded", function() {
        cargarProductosInventario(); // Cargar productos del inventario al inicio

        let btnDescargarPDF = document.getElementById("btnDescargarPDF");
        let imagenInput = document.getElementById("ImagenInput");
         let btnGuardar = document.getElementById("btnGuardar");

               if (btnGuardar) {
            btnGuardar.addEventListener("click", async function () {
                console.log("✅ Botón Guardar clickeado.");

                let tbody = document.querySelector("#tablaSolicitudes tbody");
                let nombre = document.getElementById("NombreTecnico")?.value.trim();
                let cantidad = document.getElementById("Cantidad")?.value.trim();
                let medida = document.getElementById("Medida")?.value.trim();
                let unidadMedida = document.getElementById("UnidadMedida")?.value.trim();
                let marca = document.getElementById("Marca")?.value.trim();
                let descripcion = document.getElementById("Descripcion")?.value.trim();

                // ✅ Capturar correctamente el nombre del proveedor seleccionado
                let proveedorSelect = document.getElementById("Proveedor");
                let proveedorNombre = proveedorSelect.options[proveedorSelect.selectedIndex].text;

                let imagenInput = document.getElementById("ImagenInput");
                let imagenSrc = "/images/no-image.png"; // Imagen por defecto

                console.log("📌 Datos capturados:", {
                    nombre, cantidad, medida, unidadMedida, marca, descripcion, proveedorNombre
                });

                if (!nombre || !cantidad || !medida || !unidadMedida || !marca || !descripcion || !proveedorNombre) {
                    alert("Por favor, complete todos los campos.");
                    return;
                }

                // ✅ Si el usuario subió una imagen, subirla al servidor
                if (imagenInput.files.length > 0) {
                    let formData = new FormData();
                    formData.append("file", imagenInput.files[0]);

                    try {
                        let response = await fetch("/Solicitudes/SubirImagen", {
                            method: "POST",
                            body: formData
                        });

                        if (!response.ok) throw new Error("Error al subir la imagen.");

                        let data = await response.json();
                        imagenSrc = `/images/${data.fileName}`;
                        console.log("✅ Imagen subida correctamente:", imagenSrc);
                    } catch (error) {
                        console.error("⚠️ Error al subir la imagen:", error);
                    }
                }

                // ✅ Agregar fila a la tabla con el nombre del proveedor correcto
                let newRow = `<tr>
                    <td>${nombre}</td>
                    <td><input type="number" class="form-control cantidad-input" value="${cantidad}" min="1" style="width: 80px;"></td>
                    <td>${medida}</td>
                    <td>${unidadMedida}</td>
                    <td>${marca}</td>
                    <td>${descripcion}</td>
                    <td><img src="${imagenSrc}" alt="Imagen Producto" class="producto-img" style="max-width: 50px; height: auto;"></td>
                    <td>${proveedorNombre}</td> <!-- Aquí se guarda el nombre del proveedor -->
                    <td><button class="btn btn-secondary btn-sm" onclick="eliminarFila(this)">Eliminar</button></td>
                </tr>`;

             tbody.insertAdjacentHTML("beforeend", newRow);

                console.log("✅ Producto agregado correctamente a la tabla.");

                let modal = bootstrap.Modal.getInstance(document.getElementById("modalNuevoProducto"));
                if (modal) {
                    modal.hide();
                }

                // ✅ Limpiar el formulario después de agregar el producto
                document.getElementById("formSolicitudMaterial").reset();
                document.getElementById("PreviewImagen").style.display = "none";
            });
        } else {
            console.error("⚠️ No se encontró el botón Guardar.");
        }
    });

        // ✅ Evento para generar el PDF
        if (btnDescargarPDF) {
            btnDescargarPDF.addEventListener("click", function () {
                let filas = document.querySelectorAll("#tablaSolicitudes tbody tr");

                if (filas.length === 0) {
                    alert("No hay productos en la lista para exportar.");
                    return;
                }

                let solicitudes = [];

                filas.forEach(fila => {
                    let columnas = fila.querySelectorAll("td");

                    if (columnas.length < 8) return;

                    let inputCantidad = columnas[1]?.querySelector("input")?.value.trim() || "";
                 let inputProveedor = columnas[7]?.querySelector("input")?.value.trim() || columnas[7]?.textContent.trim() || "Sin proveedor";

    let solicitud = {
        nombreTecnico: columnas[0]?.textContent.trim() || "Sin nombre",
        cantidad: inputCantidad !== "" ? parseInt(inputCantidad) : 0,
        medida: columnas[2]?.textContent.trim() || "Sin medida",
        unidadMedida: columnas[3]?.textContent.trim() || "Sin unidad",
        marca: columnas[4]?.textContent.trim() || "Sin marca",
        descripcion: columnas[5]?.textContent.trim() || "Sin descripción",
        posibleProveedor: inputProveedor, // ✅ Aquí se pasa correctamente el proveedor
        imagen: columnas[6]?.querySelector("img") ? getBase64Image(columnas[6].querySelector("img")) : "Sin imagen"
    };


                    solicitudes.push(solicitud);
                });

                if (solicitudes.length === 0) {
                    alert("No hay datos válidos para exportar.");
                    return;
                }

                console.log("Solicitudes enviadas:", JSON.stringify(solicitudes, null, 2));

                fetch("/Solicitudes/DescargarPDF", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(solicitudes)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Error al generar el archivo PDF.");
                    }
                    return response.blob();
                })
                .then(blob => {
                    let url = window.URL.createObjectURL(blob);
                    let a = document.createElement("a");
                    a.href = url;
                    a.download = "Solicitudes_Material.pdf";
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("Error al descargar el archivo.");
                });
            });
        }




           function cargarProductosInventario() {
        fetch('/Productos/ObtenerProductos')
            .then(response => {
                if (!response.ok) {
                    throw new Error("Error al obtener productos");
                }
                return response.json();
            })
            .then(data => {
                let tbody = document.querySelector("#tablaInventario tbody");
                tbody.innerHTML = "";
                data.forEach(producto => {
                    let imagenSrc = producto.imagen && producto.imagen.trim() !== ""
                        ? `/images/${producto.imagen}`
                        : "/images/no-image.png"; // Imagen por defecto

                    let row = `<tr>
                        <td><button class="btn btn-sm btn-orange"
                            onclick="seleccionarProducto('${producto.item}', '${producto.nombreTecnico}',
                            '${producto.cantidad}', '${producto.medida}', '${producto.unidadMedida}',
                            '${producto.marca}', '${producto.ubicacion}', '${producto.estado}',
                            '${producto.imagen}', '${producto.descripcion}')">
                            Seleccionar</button></td>
                        <td>${producto.nombreTecnico || '-'}</td>
                        <td>${producto.cantidad || '-'}</td>
                        <td>${producto.medida || '-'}</td>
                        <td>${producto.unidadMedida || '-'}</td>
                        <td>${producto.marca || '-'}</td>
                       <td class="d-none">${producto.descripcion || '-'}</td>
                        <td>${producto.ubicacion || '-'}</td>
                        <td>${producto.estado || '-'}</td>
                        <td><img src="${imagenSrc}" alt="Imagen Producto" class="producto-img"></td>
                    </tr>`;

                    tbody.innerHTML += row;
                });

                // ✅ Inicializar DataTable con búsqueda, paginación y responsive
                $('#tablaInventario').DataTable({
                    destroy: true,
                    responsive: true,
                    pageLength: 10,
                    language: {
                        search: "Buscar:",
                        lengthMenu: "Mostrar _MENU_ registros",
                        info: "Mostrando _START_ a _END_ de _TOTAL_ productos",
                        paginate: {
                            next: "Siguiente",
                            previous: "Anterior"
                        }
                    }
                });

            })
            .catch(error => console.error("Error al cargar productos:", error));
    }



    document.getElementById("btnAgregarInventario").addEventListener("click", function() {
        cargarProductosInventario();
    });

    function seleccionarProducto(item, nombre, cantidad, medida, unidadMedida, marca, ubicacion, estado, imagen, descripcion, proveedor) {
        console.log("➡️ Producto seleccionado:");
        console.log("Item:", item);
        console.log("Nombre:", nombre);
        console.log("Cantidad:", cantidad);
        console.log("Medida:", medida);
        console.log("Unidad de Medida:", unidadMedida);
        console.log("Marca:", marca);
        console.log("Ubicación:", ubicacion);
        console.log("Estado:", estado);
        console.log("Imagen:", imagen);
        console.log("Descripción:", descripcion);
        console.log("Proveedor recibido:", proveedor);

        let tbody = document.querySelector("#tablaSolicitudes tbody");

        // Asegurar que el proveedor tiene un valor válido
        let proveedorNombre = proveedor && proveedor.trim() !== "" ? proveedor : "Sodimac";
        console.log("Proveedor asignado:", proveedorNombre);

        let imagenSrc = imagen && imagen.trim() !== "" ? `/images/${imagen}` : "/images/no-image.png";

        let newRow = `<tr>
            <td>${nombre}</td>
            <td><input type="number" class="form-control cantidad-input" value="1" min="1" style="width: 80px;"></td>
            <td>${medida}</td>
            <td>${unidadMedida}</td>
            <td>${marca}</td>
            <td>${descripcion}</td>
            <td><img src="${imagenSrc}" alt="Imagen Producto" class="producto-img" style="max-width: 50px;"></td>
            <td>${proveedorNombre}</td>
            <td><button class="btn btn-secondary btn-sm" onclick="eliminarFila(this)">Eliminar</button></td>
        </tr>`;

        // ✅ Esta línea conserva las cantidades anteriores
        tbody.insertAdjacentHTML("beforeend", newRow);

        // ✅ Cerrar el modal correctamente
        let modalInventario = bootstrap.Modal.getInstance(document.getElementById("modalInventario"));
        if (modalInventario) {
            console.log("Cerrando modal de inventario...");
            modalInventario.hide();
        } else {
            console.warn("⚠️ No se pudo cerrar el modal de inventario.");
        }
    }




    document.getElementById("btnNuevoProducto").addEventListener("click", function() {
        document.getElementById("formSolicitudMaterial").style.display = "block";
    });

    document.getElementById("ImagenInput").addEventListener("change", function(event) {
        let file = event.target.files[0];
        if (file) {
            let reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById("PreviewImagen").src = e.target.result;
                document.getElementById("PreviewImagen").style.display = "block";
            };
            reader.readAsDataURL(file);
        }
    });

        document.getElementById("btnGuardar").addEventListener("click", async function () {
        let tbody = document.querySelector("#tablaSolicitudes tbody");
        let nombre = document.getElementById("NombreTecnico").value.trim();
        let cantidad = document.getElementById("Cantidad").value.trim();
        let medida = document.getElementById("Medida").value.trim();
        let unidadMedida = document.getElementById("UnidadMedida").value.trim();
        let marca = document.getElementById("Marca").value.trim();
        let descripcion = document.getElementById("Descripcion").value.trim();
        let posibleProveedor = document.getElementById("PosibleProveedor").value.trim();
        let imagenInput = document.getElementById("ImagenInput");

        // Validación básica
        if (!nombre || !cantidad || !medida || !unidadMedida || !marca || !descripcion || !posibleProveedor) {
            alert("Por favor, complete todos los campos.");
            return;
        }

        let imagenSrc = "/images/no-image.png"; // Imagen por defecto

        // Si el usuario subió una imagen, subirla al servidor
        if (imagenInput.files.length > 0) {
            let formData = new FormData();
            formData.append("file", imagenInput.files[0]);

            try {
                let response = await fetch("/Solicitudes/SubirImagen", {
                    method: "POST",
                    body: formData
                });

                if (!response.ok) throw new Error("Error al subir la imagen.");

                let data = await response.json();
                imagenSrc = `/images/${data.fileName}`;
            } catch (error) {
                console.error("Error al subir la imagen:", error);
            }
        }

        // Agregar fila a la tabla
        let newRow = `<tr>
            <td>${nombre}</td>
            <td><input type="number" class="form-control cantidad-input" value="${cantidad}" min="1" style="width: 80px;"></td>
            <td>${medida}</td>
            <td>${unidadMedida}</td>
            <td>${marca}</td>
            <td>${descripcion}</td>
            <td><img src="${imagenSrc}" style="max-width:50px;"></td>
            <td><input type="text" class="form-control proveedor-input" value="${posibleProveedor}" style="width: 150px;"></td>
            <td><button class="btn btn-secondary btn-sm" onclick="eliminarFila(this)">Eliminar</button></td>
        </tr>`;

    tbody.insertAdjacentHTML("beforeend", newRow);


        // Cerrar el modal después de agregar el producto
        let modal = bootstrap.Modal.getInstance(document.getElementById("modalNuevoProducto"));
        if (modal) modal.hide();

        // Limpiar el formulario
        document.getElementById("formSolicitudMaterial").reset();
        document.getElementById("PreviewImagen").style.display = "none";
    });


    function eliminarFila(button) {
        button.closest("tr").remove();
    }

    document.getElementById("btnCancelar").addEventListener("click", function() {
        document.getElementById("formSolicitudMaterial").style.display = "none";
        document.getElementById("ImagenInput").value = "";
        document.getElementById("PreviewImagen").src = "";
        document.getElementById("PreviewImagen").style.display = "none";
    });

        document.getElementById("btnDescargarPDF").addEventListener("click", function () {
        let filas = document.querySelectorAll("#tablaSolicitudes tbody tr");

        if (filas.length === 0) {
            alert("No hay productos en la lista para exportar.");
            return;
        }

        let solicitudes = [];

        filas.forEach(fila => {
            let columnas = fila.querySelectorAll("td");

            if (columnas.length < 8) return;

            let inputCantidad = columnas[1]?.querySelector("input")?.value.trim() || "";

            // ✅ Captura correcta del proveedor
            let proveedorNombre = columnas[7]?.textContent.trim() || "Sin proveedor";

            let solicitud = {
                nombreTecnico: columnas[0]?.textContent.trim() || "Sin nombre",
                cantidad: inputCantidad !== "" ? parseInt(inputCantidad) : 0,
                medida: columnas[2]?.textContent.trim() || "Sin medida",
                unidadMedida: columnas[3]?.textContent.trim() || "Sin unidad",
                marca: columnas[4]?.textContent.trim() || "Sin marca",
                descripcion: columnas[5]?.textContent.trim() || "Sin descripción",
                posibleProveedor: proveedorNombre, // ✅ Aquí ahora se pasa el proveedor correctamente
                imagen: columnas[6]?.querySelector("img") ? getBase64Image(columnas[6].querySelector("img")) : "Sin imagen"
            };

            solicitudes.push(solicitud);
        });

        if (solicitudes.length === 0) {
            alert("No hay datos válidos para exportar.");
            return;
        }

        console.log("Solicitudes enviadas:", JSON.stringify(solicitudes, null, 2));

        fetch("/Solicitudes/DescargarPDF", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(solicitudes)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Error al generar el archivo PDF.");
            }
            return response.blob();
        })
        .then(blob => {
            let url = window.URL.createObjectURL(blob);
            let a = document.createElement("a");
            a.href = url;
            a.download = "Solicitudes_Material.pdf";
            document.body.appendChild(a);
            a.click();
            a.remove();
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Error al descargar el archivo.");
        });
    });

       function getBase64Image(img) {
        let canvas = document.createElement("canvas");
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        let ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        return canvas.toDataURL("image/png");
    }



</script>

<style>
  
    .table-responsive {
        overflow-x: auto;
    }

    .pagination-separated .paginate_button {
        margin: 0 8px;
    }

    .table-hover tbody tr:hover {
        background-color: #ffcebf;
    }

    .mb-4 {
        margin-bottom: 3rem !important;
    }

    .table-light th {
        background-color: #f8f9fa;
        font-weight: bold;
        text-align: center;
    }

    .table td {
        vertical-align: middle;
        padding: 10px; /* 🔹 Aumentado el padding en todas las celdas */
    }

        /* 🔹 Ajuste de la celda que contiene la imagen */
        .table td:nth-child(7) {
            text-align: center;
            padding: 10px 10px; /* 🔹 Más espacio arriba y abajo */
        }

        /* 🔹 Ajuste de la imagen dentro de la celda */
        .table td img {
            margin: 10px auto; /* 🔹 Aumentado el margen arriba y abajo */
            display: block;
            max-width: 60px; /* 🔹 Ajuste del tamaño para mejorar la visualización */
        }

    /* 🔹 Forzar un modal más ancho */
    .modal-xl {
        max-width: 95vw !important;
    }

    /* 🔹 Asegurar que la tabla use todo el ancho disponible */
    #tablaInventario {
        table-layout: fixed;
        width: 100%;
    }

    /* 🔹 Ajustar imágenes dentro de la tabla */
    .producto-img {
        display: block;
        max-width: 60px;
        height: auto;
        margin: 0 auto;
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
    }

    /* 🔹 Mejorar alineación de la tabla */
    #tablaInventario th, #tablaInventario td {
        text-align: center;
        vertical-align: middle;
        padding: 8px;
    }


</style>
